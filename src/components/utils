 state = {
    //=== <create todos array and use uuid library to dynamically generate id====
    // todos: [
    //   {
    //     id: uuid.v4(),
    //     title: "Have a quite time",
    //     completed: false
    //   },
    //   {
    //     id: uuid.v4(),
    //     title: "Take break fast",
    //     completed: false
    //   },
    //   {
    //     id: uuid.v4(),
    //     title: "Set off to school",
    //     completed: false
    //   }
    // ]
    //todos: localStorage.getItem("mytodos", JSON.stringify())
    todos: window.localStorage.getItem('mytodos') ? JSON.parse(window.localStorage.getItem('mytodos')) : [],
  };

  componentDidMount() {
    // localStorage.setItem("mytodos", JSON.stringify(this.state.todos))
  }

  //=== <create todos array====
  /* state = {
    todos: []
  };
//======== making an HTTP request using axios api===
/*componentDidMount(){
  axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')
  .then(res => this.setState({todos: res.data}))
}*/

  //==========Function to check completed box ========
  checkCompleted = id => {

    const completedTodo = this.state.todos.map(todo => {
      if (todo.id === id) {
        todo.completed = !todo.completed;
      }
      return todo;
    })

    window.localStorage.setItem("mytodos", JSON.stringify(completedTodo));


    this.setState({
      todos: completedTodo
      //   this.state.todos.map(todo => {
      //   if (todo.id === id) {
      //     todo.completed = !todo.completed;
      //   }
      //   return todo;
      // })
    });
  };
  //==========Function to addTodo Todolist =======
  addTodo = title => {
    const newTodo = {
      id: uuid.v4(),
      title,
      completed: false
    };

    const updatedNewTodo = [...this.state.todos, newTodo]
    this.setState({
      todos: updatedNewTodo
    });
    // this.setState({ todos: [...this.state.todos, newTodo] });
    //localStorage.setItem("mytodos", JSON.stringify(this.state.todos));
    window.localStorage.setItem("mytodos", JSON.stringify(updatedNewTodo));

  };

  //========== Adding addTodo by making HTTP post =======

  /*addTodo = title => {
     axios.post('https://jsonplaceholder.typicode.com/todos', {
       title,
       completed: false
     })
     .then(res => this.setState({ todos: [...this.state.todos, res.data] }));
  };*/

  //==========Function to delete Todolist ========

  delTodo = id => {
    const filteredId = this.state.todos.filter(todo => todo.id !== id)
    window.localStorage.setItem("mytodos", JSON.stringify(filteredId));
    // const newFilteredId = [...this.state.todos.filteredId]
    this.setState({
      todos: filteredId
    });
    // this.setState({
    //   todos: [...this.state.todos.filter(todo => todo.id !== id)]
    // });
  };
  /* delTodo = id => {
  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)
  .then(res =>   this.setState({
    todos: [...this.state.todos.filter(todo => todo.id !== id)]
  }));
  };*/


  <Route
            exact
            path="/todos"
            render={props => (
              <React.Fragment>
                {/* <AddTodo addTodo={this.addTodo} /> */}
                <Todos
                  todos={this.state.todos}
                  checkCompleted={this.checkCompleted}
                  delTodo={this.delTodo}
                />
              </React.Fragment>
            )}
          />


  allStorageKeys = Object.keys(localStorage);
  myFilter = this.allStorageKeys.indexOf(this.state.todos.firstName);
  storageKey = this.allStorageKeys[this.myFilter]

    //========== Function to add users to user array in state =======
  addSignInUser = newUser => {
    const authUser = [...this.state.user, newUser]
    let newUserCheck = this.state.user.includes(newUser)
    if (!newUserCheck) {
      this.setState({ user: authUser })
      window.localStorage.setItem("appUsers", JSON.stringify(authUser));
    }
  }


  //======== Login Function ======
  logIn = () => {
    let signInUser = this.state.todos.firstName
    let authUser = this.state.user.includes(signInUser)
    if (authUser) {
      return authUser
    }
  }

  export default class ProtectedRoute extends Component {

    user = JSON.parse(window.localStorage.getItem('mytodos')) 

    render() {
        const { component: Component, ...rest } = this.props

       console.log(this.props)
        // firstName !== 'undefined' || firstName !== '' ?
        // (this.state.todos.firstName === null || this.state.todos.firstName === "")
          // <Redirect to={{ pathname: '/', state: { from: props.location } }} />
        //this.user.firstName !== 'undefined' && this.user.firstName !== '' ?
        return (
            <Route
                {...rest}
                render={props => (
                    this.user.firstName !== 'undefined' && this.user.firstName !== '' ?
                        <Component {...props} /> :
                        <Redirect to='/' />
                )}
            />
        )
    }
}

const Authenticate = ({ component: Component, ...rest }) => {
    // <Redirect to={{ pathname: "/", state: { from: props.location } }} />
    //const history = useHistory();
    //console.log(history)
    const user = JSON.parse(window.localStorage.getItem('mytodos'))

    // const checkAuth = () => {
    //     if (firstName !== null && firstName !== "") {
    //         return true
    //     }
    // }
    // console.log(firstName)
    return (
        <Route
            {...rest}
            render={(props) => {
                if (user.firstName === 'undefined' && user.firstName === '') {
                    return (<Redirect to={
                        {
                            pathname: '/',
                            state: {
                                from: props.location
                            }
                        }
                    } />)
                } else {
                    return (<Component {...props
                    } />);
                }
            }}
        />
    );
}
export default Authenticate


function showNotification() {
  Notification.requestPermission(function(result) {
    if (result === 'granted') {
      navigator.serviceWorker.ready.then(function(registration) {
        registration.showNotification('Vibration Sample', {
          body: 'Buzz! Buzz!',
          icon: '../images/touch/chrome-touch-icon-192x192.png',
          vibrate: [200, 100, 200, 100, 200, 100, 200],
          tag: 'vibration-sample'
        });
      });
    }
  });
}